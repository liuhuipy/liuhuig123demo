// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"liuhuig123demo/internal/model"
)

func newHotelInfo(db *gorm.DB, opts ...gen.DOOption) hotelInfo {
	_hotelInfo := hotelInfo{}

	_hotelInfo.hotelInfoDo.UseDB(db, opts...)
	_hotelInfo.hotelInfoDo.UseModel(&model.HotelInfo{})

	tableName := _hotelInfo.hotelInfoDo.TableName()
	_hotelInfo.ALL = field.NewAsterisk(tableName)
	_hotelInfo.ID = field.NewUint(tableName, "id")
	_hotelInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_hotelInfo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_hotelInfo.DeletedAt = field.NewField(tableName, "deleted_at")
	_hotelInfo.Name = field.NewString(tableName, "name")
	_hotelInfo.Star = field.NewInt32(tableName, "star")
	_hotelInfo.Price = field.NewFloat64(tableName, "price")
	_hotelInfo.PriceBeforeTaxes = field.NewString(tableName, "price_before_taxes")
	_hotelInfo.CheckInDate = field.NewString(tableName, "check_in_date")
	_hotelInfo.CheckOutDate = field.NewString(tableName, "check_out_date")
	_hotelInfo.Guests = field.NewString(tableName, "guests")

	_hotelInfo.fillFieldMap()

	return _hotelInfo
}

type hotelInfo struct {
	hotelInfoDo

	ALL              field.Asterisk
	ID               field.Uint
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	Name             field.String
	Star             field.Int32
	Price            field.Float64
	PriceBeforeTaxes field.String
	CheckInDate      field.String
	CheckOutDate     field.String
	Guests           field.String

	fieldMap map[string]field.Expr
}

func (h hotelInfo) Table(newTableName string) *hotelInfo {
	h.hotelInfoDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hotelInfo) As(alias string) *hotelInfo {
	h.hotelInfoDo.DO = *(h.hotelInfoDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hotelInfo) updateTableName(table string) *hotelInfo {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewUint(table, "id")
	h.CreatedAt = field.NewTime(table, "created_at")
	h.UpdatedAt = field.NewTime(table, "updated_at")
	h.DeletedAt = field.NewField(table, "deleted_at")
	h.Name = field.NewString(table, "name")
	h.Star = field.NewInt32(table, "star")
	h.Price = field.NewFloat64(table, "price")
	h.PriceBeforeTaxes = field.NewString(table, "price_before_taxes")
	h.CheckInDate = field.NewString(table, "check_in_date")
	h.CheckOutDate = field.NewString(table, "check_out_date")
	h.Guests = field.NewString(table, "guests")

	h.fillFieldMap()

	return h
}

func (h *hotelInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hotelInfo) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 11)
	h.fieldMap["id"] = h.ID
	h.fieldMap["created_at"] = h.CreatedAt
	h.fieldMap["updated_at"] = h.UpdatedAt
	h.fieldMap["deleted_at"] = h.DeletedAt
	h.fieldMap["name"] = h.Name
	h.fieldMap["star"] = h.Star
	h.fieldMap["price"] = h.Price
	h.fieldMap["price_before_taxes"] = h.PriceBeforeTaxes
	h.fieldMap["check_in_date"] = h.CheckInDate
	h.fieldMap["check_out_date"] = h.CheckOutDate
	h.fieldMap["guests"] = h.Guests
}

func (h hotelInfo) clone(db *gorm.DB) hotelInfo {
	h.hotelInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hotelInfo) replaceDB(db *gorm.DB) hotelInfo {
	h.hotelInfoDo.ReplaceDB(db)
	return h
}

type hotelInfoDo struct{ gen.DO }

type IHotelInfoDo interface {
	gen.SubQuery
	Debug() IHotelInfoDo
	WithContext(ctx context.Context) IHotelInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHotelInfoDo
	WriteDB() IHotelInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHotelInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHotelInfoDo
	Not(conds ...gen.Condition) IHotelInfoDo
	Or(conds ...gen.Condition) IHotelInfoDo
	Select(conds ...field.Expr) IHotelInfoDo
	Where(conds ...gen.Condition) IHotelInfoDo
	Order(conds ...field.Expr) IHotelInfoDo
	Distinct(cols ...field.Expr) IHotelInfoDo
	Omit(cols ...field.Expr) IHotelInfoDo
	Join(table schema.Tabler, on ...field.Expr) IHotelInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHotelInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHotelInfoDo
	Group(cols ...field.Expr) IHotelInfoDo
	Having(conds ...gen.Condition) IHotelInfoDo
	Limit(limit int) IHotelInfoDo
	Offset(offset int) IHotelInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHotelInfoDo
	Unscoped() IHotelInfoDo
	Create(values ...*model.HotelInfo) error
	CreateInBatches(values []*model.HotelInfo, batchSize int) error
	Save(values ...*model.HotelInfo) error
	First() (*model.HotelInfo, error)
	Take() (*model.HotelInfo, error)
	Last() (*model.HotelInfo, error)
	Find() ([]*model.HotelInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HotelInfo, err error)
	FindInBatches(result *[]*model.HotelInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HotelInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHotelInfoDo
	Assign(attrs ...field.AssignExpr) IHotelInfoDo
	Joins(fields ...field.RelationField) IHotelInfoDo
	Preload(fields ...field.RelationField) IHotelInfoDo
	FirstOrInit() (*model.HotelInfo, error)
	FirstOrCreate() (*model.HotelInfo, error)
	FindByPage(offset int, limit int) (result []*model.HotelInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHotelInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hotelInfoDo) Debug() IHotelInfoDo {
	return h.withDO(h.DO.Debug())
}

func (h hotelInfoDo) WithContext(ctx context.Context) IHotelInfoDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hotelInfoDo) ReadDB() IHotelInfoDo {
	return h.Clauses(dbresolver.Read)
}

func (h hotelInfoDo) WriteDB() IHotelInfoDo {
	return h.Clauses(dbresolver.Write)
}

func (h hotelInfoDo) Session(config *gorm.Session) IHotelInfoDo {
	return h.withDO(h.DO.Session(config))
}

func (h hotelInfoDo) Clauses(conds ...clause.Expression) IHotelInfoDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hotelInfoDo) Returning(value interface{}, columns ...string) IHotelInfoDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hotelInfoDo) Not(conds ...gen.Condition) IHotelInfoDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hotelInfoDo) Or(conds ...gen.Condition) IHotelInfoDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hotelInfoDo) Select(conds ...field.Expr) IHotelInfoDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hotelInfoDo) Where(conds ...gen.Condition) IHotelInfoDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hotelInfoDo) Order(conds ...field.Expr) IHotelInfoDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hotelInfoDo) Distinct(cols ...field.Expr) IHotelInfoDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hotelInfoDo) Omit(cols ...field.Expr) IHotelInfoDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hotelInfoDo) Join(table schema.Tabler, on ...field.Expr) IHotelInfoDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hotelInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHotelInfoDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hotelInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IHotelInfoDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hotelInfoDo) Group(cols ...field.Expr) IHotelInfoDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hotelInfoDo) Having(conds ...gen.Condition) IHotelInfoDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hotelInfoDo) Limit(limit int) IHotelInfoDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hotelInfoDo) Offset(offset int) IHotelInfoDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hotelInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHotelInfoDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hotelInfoDo) Unscoped() IHotelInfoDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hotelInfoDo) Create(values ...*model.HotelInfo) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hotelInfoDo) CreateInBatches(values []*model.HotelInfo, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hotelInfoDo) Save(values ...*model.HotelInfo) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hotelInfoDo) First() (*model.HotelInfo, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HotelInfo), nil
	}
}

func (h hotelInfoDo) Take() (*model.HotelInfo, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HotelInfo), nil
	}
}

func (h hotelInfoDo) Last() (*model.HotelInfo, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HotelInfo), nil
	}
}

func (h hotelInfoDo) Find() ([]*model.HotelInfo, error) {
	result, err := h.DO.Find()
	return result.([]*model.HotelInfo), err
}

func (h hotelInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HotelInfo, err error) {
	buf := make([]*model.HotelInfo, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hotelInfoDo) FindInBatches(result *[]*model.HotelInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hotelInfoDo) Attrs(attrs ...field.AssignExpr) IHotelInfoDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hotelInfoDo) Assign(attrs ...field.AssignExpr) IHotelInfoDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hotelInfoDo) Joins(fields ...field.RelationField) IHotelInfoDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hotelInfoDo) Preload(fields ...field.RelationField) IHotelInfoDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hotelInfoDo) FirstOrInit() (*model.HotelInfo, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HotelInfo), nil
	}
}

func (h hotelInfoDo) FirstOrCreate() (*model.HotelInfo, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HotelInfo), nil
	}
}

func (h hotelInfoDo) FindByPage(offset int, limit int) (result []*model.HotelInfo, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hotelInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hotelInfoDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hotelInfoDo) Delete(models ...*model.HotelInfo) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hotelInfoDo) withDO(do gen.Dao) *hotelInfoDo {
	h.DO = *do.(*gen.DO)
	return h
}
